version: '3.8'

# Define a rede padrão para permitir a comunicação entre os containers usando os seus nomes de serviço.
networks:
  foundry-net:
    driver: bridge

services:
  # --- BANCOS DE DADOS E CACHE ---

  # Serviço 1: Banco de Dados para CRUD (SQL Server)
  sqlserver-db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: foundry-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=your_Strong(!)Password1
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - foundry-net

  # Serviço 2: Banco de Dados para Event Sourcing (PostgreSQL)
  postgres-db:
    image: postgres:15-alpine
    container_name: foundry-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=your_super_secret_password
      - POSTGRES_DB=foundry_sample_eventstore
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - foundry-net

  # Serviço 3: Cache Distribuído (Redis)
  redis-cache:
    image: redis:7-alpine
    container_name: foundry-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - foundry-net

  # --- STACK DE OBSERVABILIDADE (ELASTIC) ---

  # Serviço 5: Armazenamento de Logs e Traces (Elasticsearch)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: foundry-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # Apenas para desenvolvimento
    ports:
      - "9200:9200"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    networks:
      - foundry-net

  # Serviço 6: Receptor de Telemetria (APM Server)
  apm-server:
    image: docker.elastic.co/apm/apm-server:8.10.2
    container_name: foundry-apm-server
    ports:
      - "8200:8200" # Porta para receber a telemetria via OTLP
    depends_on:
      - elasticsearch
    command: >
      apm-server -e
        -E apm-server.host="0.0.0.0:8200"
        -E output.elasticsearch.hosts=["http://elasticsearch:9200"]
    networks:
      - foundry-net

  # Serviço 7: Interface de Visualização (Kibana)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: foundry-kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
      - apm-server
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - foundry-net

  # --- A NOSSA APLICAÇÃO DE API ---

  # Serviço 4: A nossa API de Exemplo
  financial-api:
    container_name: foundry-financial-api
    build:
      context: .
      dockerfile: src/samples/1-FinancialMarket-DDD/Sample.FinancialMarket.Api/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      # As connection strings usam os NOMES DOS SERVIÇOS (ex: 'sqlserver-db')
      - ConnectionStrings__SqlServerConnection=Server=sqlserver-db,1433;Database=Foundry_Sample_CRUD;User Id=sa;Password=your_Strong(!)Password1;TrustServerCertificate=True
      - ConnectionStrings__PostgresConnection=Host=postgres-db;Port=5432;Database=foundry_sample_eventstore;Username=postgres;Password=your_super_secret_password
      - ConnectionStrings__Redis=redis-cache:6379
      # A API envia a sua telemetria para o APM Server
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://apm-server:8200
    depends_on:
      - sqlserver-db
      - postgres-db
      - redis-cache
      - apm-server
    networks:
      - foundry-net

# Define os volumes para que os dados persistam entre reinicializações dos containers.
volumes:
  sqlserver_data:
  postgres_data:
  redis_data:
  elastic_data: